import requests
from bs4 import BeautifulSoup
from core import CommonFunctions
import Config
import multiprocessing
import copy
def check_weak_passwords(loginFormEndpoints, findings):
    args = []
    for passwords in Config.common_passwords_thread:
        args.append((loginFormEndpoints,passwords))

    pool = multiprocessing.Pool(processes=Config.number_of_threads)
    retValues = pool.starmap(check_weak_passwords_thread, args)
    pool.close()
    pool.join()
    for retValue in retValues:
        if retValue:
            findings["WeakPassword"].extend(retValue["WeakPassword"])

def check_weak_passwords_thread(loginFormEndpoints, common_passwords):
    for p in common_passwords:
        if p == "password":
            a=""
    retValue = {"WeakPassword":[]}
    headers = {'User-Agent': Config.user_agent}
    req = requests.Session()

    for loginFormEndpoint_1 in loginFormEndpoints:
        if "wp-login" in loginFormEndpoint_1.action:
            return retValue

        action = loginFormEndpoint_1.action
        for common_password in common_passwords:
            loginFormEndpoint = copy.deepcopy(loginFormEndpoint_1)

            if common_password=="password":
                a=""
            loginFormEndpoint = CommonFunctions.refetch_form(req, loginFormEndpoint)
            if loginFormEndpoint == None:
                continue

            params_dynamic = loginFormEndpoint.params['dynamic']
            keys = list(params_dynamic.keys())
            if len(keys) < 2:
                break
            params_dynamic[keys[0]] = "admin"
            params_dynamic[keys[1]] = common_password

            params = loginFormEndpoint.params['static']
            params.update(params_dynamic)
            try:
                if loginFormEndpoint.method.lower() == "get":
                    r = req.get(action, headers=headers, params=params, allow_redirects=True,
                                proxies={"http": Config.http_proxy, "https": Config.https_proxy}, verify=False, timeout=Config.timeout)
                else:
                    r = req.post(action, headers=headers, data=params, allow_redirects=True,
                                 proxies={"http": Config.http_proxy, "https": Config.https_proxy}, verify=False, timeout=Config.timeout)
                response_text = r.content.decode('utf-8', errors='ignore')
                soup1 = BeautifulSoup(response_text, "html.parser")
            except requests.exceptions.RequestException as e:
                continue


            flag1 = False
            for input in soup1.findAll('input'):
                if input.has_attr('type') and input['type'] == 'password':
                    flag1 = True
            if flag1 == False:
                loginFormEndpoint1 = CommonFunctions.refetch_form(req, loginFormEndpoint)
                if loginFormEndpoint1 == None:
                    retValue["WeakPassword"].append({"method":loginFormEndpoint.method,"action":loginFormEndpoint.action, "password": common_password})
                    return retValue
