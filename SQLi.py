import CommonFunctions
import requests
from urllib.parse import urlparse
from urllib.parse import urlunparse
from urllib.parse import parse_qsl
from urllib.parse import urlencode

import re
import Config

def sqli_scan_urls(uEndPoints, findings):

    sqli_completed_urls = []
    for e in uEndPoints:
        parsed_url = urlparse(e.url)
        params = parse_qsl(parsed_url.query)

        params_count = len(params)
        new_params_clean = []
        for i in range(0, params_count):
            new_params_clean.append((params[i][0], ""))
        new_url_clean = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, parsed_url.params,
                                    urlencode(new_params_clean), None))

        if e.url.find("?") != -1 and new_url_clean not in sqli_completed_urls:
            sqli_completed_urls.append(new_url_clean)
            sqli_scan_url(e.url, findings)
    return


def sqli_scan_url(url, findings):
    parsed_url = urlparse(url)
    params = parse_qsl(parsed_url.query)

    params_count = len(params)
    new_params_clean = []
    for i in range(0, params_count):
        new_params_clean.append((params[i][0], ""))
    new_url_clean = urlunparse(
        (parsed_url.scheme, parsed_url.netloc, parsed_url.path, None, urlencode(new_params_clean), None))
    # loop through all parameters, injecting at index i
    for i in range(0, params_count):
        new_params = []
        parameter = ""
        for j in range(0, params_count):
            if i == j:
                new_params.append((params[j][0], params[j][1] + CommonFunctions.get_random(6) +"'\"`"))
                parameter = params[j][0]
            else:
                new_params.append((params[j][0], params[j][1]))
        queryString = urlencode(new_params)
        new_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, None, queryString, None))
        error_msgs = check_sqli_error(new_url)
        if error_msgs != None and len(error_msgs) > 0:
            should_verify = False
            verification_result = False
            if error_msgs[0]["error_msgs"] == "500 - Internal Server Error -> Possible SQL Injection":
                should_verify = True
                verification_result, payload = verify_sqli_url(url,i)
            if error_msgs[0]["error_msgs"] == "Content-Length: 0 -> Possible SQL Injection":
                should_verify = True
                verification_result, payload = verify_sqli_url(url,i)

            if should_verify and verification_result:
                error_msgs[0]["error_msgs"] = "Verified - " + error_msgs[0]["error_msgs"]
                findings["sqlinjection"].append(
                    {"url": url, "url1": url, "form":"no", "payload": queryString, "method": "get", "parameter": parameter + " ="+payload,
                     "sql_error_msgs": error_msgs})

            if should_verify == False:
                findings["sqlinjection"].append(
                {"url": url, "url1": url, "form": "no", "payload": queryString, "method": "get", "parameter": parameter,
                 "sql_error_msgs": error_msgs})
        # if lensqli != None:

def verify_sqli_url(url, index):
    parsed_url = urlparse(url)
    params = parse_qsl(parsed_url.query)

    params_count = len(params)
    new_params_clean = []
    for i in range(0, params_count):
        new_params_clean.append((params[i][0], ""))
    new_url_clean = urlunparse(
        (parsed_url.scheme, parsed_url.netloc, parsed_url.path, None, urlencode(new_params_clean), None))
    # loop through all parameters, injecting at index i
    for payload in Config.auth_bypass_payloads:
        new_params = []
        parameter = ""
        for j in range(0, params_count):
            if index == j:
                new_params.append((params[j][0], params[j][1] + payload))
                parameter = params[j][0]
            else:
                new_params.append((params[j][0], params[j][1]))
        queryString = urlencode(new_params)
        new_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, None, queryString, None))
        error_msgs = check_sqli_error(new_url)
        if error_msgs != None and len(error_msgs) > 0:
            continue
        else:
            return True, payload
    return False, None


def check_sqli_error(url):
    headers = {'User-Agent': Config.user_agent}
    try:
        r = requests.get(url, headers=headers, allow_redirects=True, proxies={"http": Config.http_proxy, "https": Config.https_proxy},
                     verify=False, timeout=Config.timeout)
    except requests.exceptions.RequestException as e:
        return
    if r.status_code == 500:
        error_msgs = []
        error_msgs.append({"dbms": "Unknown", "error_msgs":"500 - Internal Server Error -> Possible SQL Injection"})
        return error_msgs

    if r.status_code != 200:
        return
    try:
        response_text = r.content.decode('utf-8', errors='ignore')
    except:
        return

    if len(response_text) == 0:
        error_msgs = []
        error_msgs.append({"dbms": "Unknown", "error_msgs":"Content-Length: 0 -> Possible SQL Injection"})
        return error_msgs
    error_msgs = []
    for dbms, errors in Config.sql_errors.items():
        for error in errors:
            s = re.search(error, response_text, re.MULTILINE)
            if s:
                error_msgs.append({"dbms": dbms, "error_msgs": s.group()})
    return error_msgs




def check_sqli_error_form(req, loginForm, params):

    headers = {'User-Agent': Config.user_agent}

    try:
        if loginForm.method.lower()=='get':
            r = req.get(loginForm.action, headers=headers, params=params, allow_redirects=False,
                          proxies={"http": Config.http_proxy, "https": Config.https_proxy}, verify=False, timeout=Config.timeout)
        else:
            r = req.post(loginForm.action, headers=headers, data=params, allow_redirects=False,
                          proxies={"http": Config.http_proxy, "https": Config.https_proxy}, verify=False, timeout=Config.timeout)
    except requests.exceptions.RequestException as e:
        return

    if r.status_code == 500:
        error_msgs = []
        error_msgs.append({"dbms": "Unknown", "error_msgs":"500 - Internal Server Error -> Possible SQL Injection"})
        return error_msgs


    if r.status_code != 200:
        return

    try:
        response_text = r.content.decode('utf-8', errors='ignore')
    except:
        return


    if len(response_text) == 0:
        error_msgs = []
        error_msgs.append({"dbms": "Unknown", "error_msgs":"Content-Length: 0 -> Possible SQL Injection"})
        return error_msgs

    error_msgs = []
    for dbms, errors in Config.sql_errors.items():
        for error in errors:
            s = re.search(error, response_text, re.MULTILINE)
            if s:
                error_msgs.append({"dbms": dbms, "error_msgs": s.group()})

    return error_msgs



def verify_sqli_form(req, fEndpoint, index):
    if "wp-login" in fEndpoint.action:
        return False
    # test sqli in all parameters
    if fEndpoint == None:
        return False
    for payload in Config.auth_bypass_payloads:
        fEndpoint = CommonFunctions.refetch_form(req, fEndpoint)
        if fEndpoint == None:
            break
        params = fEndpoint.params["dynamic"]
        key = list(params.keys())[index]
        params[key] = params[key] + payload
        params.update(fEndpoint.params['static'])
        error_msgs = check_sqli_error_form(req, fEndpoint,params)
        if error_msgs != None and len(error_msgs) > 0:
            continue
        else:
            return True, payload
    return False, None




def sqli_scan_forms(fEndpoints, findings):
    req = requests.Session()
    for fEndpoint in fEndpoints:
        if "wp-login" in fEndpoint.action:
            continue
        # test sqli in all parameters
        if fEndpoint == None:
            continue
        params_count = len(fEndpoint.params["dynamic"])
        for i in range(0,params_count):
            fEndpoint = CommonFunctions.refetch_form(req, fEndpoint)
            if fEndpoint == None:
                break
            params = fEndpoint.params["dynamic"]
            key = list(params.keys())[i]
            params[key] = params[key] + "'\"`"
            params.update(fEndpoint.params['static'])
            error_msgs = check_sqli_error_form(req, fEndpoint,params)
            if error_msgs != None and len(error_msgs) > 0:

                should_verify = False
                verification_result = False
                if error_msgs[0]["error_msgs"] == "500 - Internal Server Error -> Possible SQL Injection":
                    should_verify = True
                    verification_result, payload = verify_sqli_form(req, fEndpoint, i)
                if error_msgs[0]["error_msgs"] == "Content-Length: 0 -> Possible SQL Injection":
                    should_verify = True
                    verification_result, payload = verify_sqli_form(req, fEndpoint, i)

                if should_verify and verification_result:
                    error_msgs[0]["error_msgs"] = "Verified - " + error_msgs[0]["error_msgs"]
                    findings["sqlinjection"].append(
                        {"url": fEndpoint.referer, "url1": fEndpoint.action, "form": "yes",
                         "method": fEndpoint.method.lower(), "parameter": key + "="+payload, "payload": urlencode(params),
                         "sql_error_msgs": error_msgs})

                if should_verify == False:
                    findings["sqlinjection"].append(
                        {"url": fEndpoint.referer, "url1": fEndpoint.action, "form": "yes",
                         "method": fEndpoint.method.lower(), "parameter": key, "payload": urlencode(params),
                         "sql_error_msgs": error_msgs})


