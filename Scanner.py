import urllib3
import signal
import sys
from Crawler import Crawler
from CommonFunctions import *
import time
import WeakPasswords
from SQLi import *
import AuthBypass
import datetime

class ScanningThread(threading.Thread):

    def __init__(self,threadID):
        threading.Thread.__init__(self)
        self.threadID = threadID

    def run(self):
        print("Thread Started")
        runScan()
def get_new_target():
    threadLock.acquire()
    for target in targets:
        if target["status"]== "fresh":
            target["status"] = "assigned"
            threadLock.release()
            return target["url"]
    threadLock.release()
    return
def update_target_status(target1, status):
    for target in targets:
        if target["url"]== target1:
            target["status"] = "completed"
    return


def runScan():

    crawler = Crawler()
    findings = {}

    while True:
        target = get_new_target()
        if target == None:
            break

        print("Scanning: ", target)

        findings.clear()
        findings = {"sqlinjection": []}

        if not crawler.init(target):
            update_target_status(target, "completed")
            continue

        crawler.crawl()
        crawler.findLoginPanel()

        AuthBypass.check_authbypass(crawler.loginFormEndpoints, findings)
        WeakPasswords.check_weak_passwords(crawler.loginFormEndpoints, findings)


        if len(crawler.loginFormEndpoints) > 0:
            findings["loginForm"]="yes"
        else:
            findings["loginForm"] = "no"

        sqli_scan_urls(crawler.uEndPoints, findings)
        sqli_scan_forms(crawler.fEndpoints, findings)
        CommonFunctions.save_findings(findings)
        update_target_status(target, "completed")



def get_targets_status():
    total = len(targets)
    fresh = 0
    assigned = 0
    completed = 0
    for target in targets:
        if target["status"] == "fresh":
            fresh = fresh + 1
        elif target["status"] == "assigned":
            assigned = assigned + 1
        elif target["status"] == "completed":
            completed = completed + 1
    return "Total: " + str(total) + "\nFresh: " + str(fresh) + " Assigned: " + str(assigned)+ " Completed: " + str(completed)

def signal_handler(sig, frame):
    print('You pressed Ctrl+C!')
    sys.exit(0)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

if __name__ == "__main__":
    print("Program Started!!!")
    signal.signal(signal.SIGINT, signal_handler)

    threadLock = threading.Lock()

    input_file = open("input.txt", "r")
    targets = input_file.readlines()
    targets = [{"url": x.strip(), "status": "fresh"} for x in targets]

    CommonFunctions.logStatus("\r\n\r\nProgram Started..." + datetime.datetime.now().strftime('%Y-%m-%d %I:%M:%S %p'))

    threads = []
    for i in range(0, Config.number_of_threads):
        threads.append(ScanningThread(i))

    for i in range(0, Config.number_of_threads):
        threads[i].start()
    threadId = Config.number_of_threads + 1
    while True:
        active_thread_count = threading.active_count()
        if active_thread_count <= Config.number_of_threads:
            thread = ScanningThread(threadId)
            thread.start()

            threads.append(thread)
            threadId = threadId + 1
        print("==================================================")
        print("Active Threads Count: " + str(active_thread_count))
        print(get_targets_status())
        print("==================================================")
        time.sleep(30)


    for i in range(0, number_of_threads):
        threads[i].join()

    print("Exiting main thread.")
    exit(0)


